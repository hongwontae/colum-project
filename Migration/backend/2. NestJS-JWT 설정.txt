1. Auth 폴더를 생성합니다.
1-1. Auth 내에는 module, service 파일을 생성합니다.
1-2. 또한 jwt.strategy.ts 파일을 생성하여 검증 로직을 준비합니다.


2. auth.module.ts에서 Passport 전략 설정과 Jwt.sign 설정을 합니다.
2-1 imports에 Passport.register({defaultStrategy : 'jwt'})를 통해 jwt가 들어왔을 떄 어떻게 처리할지 
NestJS에게 알려줍니다.
2-2. JwtModule.registerAsync({
    imports : [ConfigModule], // 환경변수를 사용하기 위해 Module을 가져옵니다.
    inject : [ConfigService], // 비동기 처리라 해도 적시에 가져올지 모르기에 inject를 통해 확실히 가져옵니다.
    useFactory : (configService : ConfigService)=>({
        // 환경변수를 로드하여 secret 키와 만료시간을 감춥니다.
        secret : configService.get<string>('.env variable'),
        signOptions : {expiresIn : configService.get<string>('.env variable')}
    })
})

2-3. providers : [AuthService, JwtStrategy]
=> AuthService와 Jwt 검증 전략 서비스를 DI 컨테이너에 등록합니다.

2-4. exports : [AuthService, JwtModule]
=> AuthService에서 constructor를 통해 JwtService를 받았습니다.
=> 이는 JwtService가 Module에서 providers에 등록되지 않은 채 성공했습니다. 이는 register가 service를 자체적으로
DI 컨테이너에 등록해버린 것입니다.
=> 내부적으로 JwtModule을 exports하면 JwtService를 외부에서 사용할 수 있습니다. 
(모듈도 exports의 대상이 될 수 있습니다.)


3. auth.service.ts
=> JwtService 의존성을 주입받습니다.
=> JwtModule.registerAsync()를 통해 DI 컨테이너 존재합니다.
=> this.jwtService.sign({})를 통해 JWT를 생성할 수 있습니다.


4. user.module.ts
=> imports에서 AuthModule을 가져옵니다. 이를 통해서 AuthModule의 exports의 AuthService와
 JwtModule(JwtService)를 자유롭게 사용할 수 있습니다.


5. user.controller.ts, user.service.ts
=> service에서 로그인 데이터를 확인하고 성공했다면 가져온 authService로 jwt를 생성합니다.
=> controller에서 가져온 jwt를 cookie로 보낼 준비를 합니다.
=> res.cookie('jwt', token, {
    ...
}).json({...})


6. JwtStrategy 파일의 로직을 작성합니다.
@Injectable()
=> export class JwtStrategy extends PassportStrategy(Strategy){}
=> extends PassportStrategy(Strategy)는 부모 클래스를 호출하고 super({})에서 인증전략을 구현할 수 있습니다.
=> super({})에서 설정한 인증전략은 Module에서 설정한 PassportModule.register 덕분에 검증 떄 자동으로 실행됩니다.

=> super({
    // JWT를 어디서 가져올지 지정하는 옵션입니다.
    // 기본적으로 header에서 가져옵니다.
    // ExtractJwt.fromAuthHeaderAsBearerToken() => Authorization 헤더에서 Bearer <token> 방식으로 가져옵니다.
    // ExtractJwt.fromUrlQueryParameter('token') => ?token=xxx 형태의 URL 쿼리 파라미터에서 가져옵니다.
    // ExtractJwt.fromExtractors() => 커스텀 함수로 추출 방식을 지정합니다. 인자로 req 객체를 받을 수 있습니다.
    jwtFromRequest : ExtractJwt.fromExtractors([(req : Request)=>{
        if(req && req.cookies){
            console.log(req.cookies)
            return req.cookies['jwt']
        }
        return null;
    }]),
    // JWT의 만료 여부를 검사할지 결정하는 옵션입니다.
    // true라면 만료되었어도 허용하고 false라면 토큰 만료시 실패합니다.
    ignoreExpiration: false,
    // JWT를 검증할 떄 사용하는 비밀키입니다.
    secretOrKey: configService.get<string>('JWT_SECRET_KEY')
})


7. JwtStrategy 클래스 내에서 validate(){} 정의
=> 검증이 성공했을 떄 실행하는 메서드입니다.
=> 성공하면 인자로 payload를 받습니다.


8. 라우트 보호하기
=> controller에서 보호할 라우트에 @useGaurd(AuthGarud('jwt'))를 설정하면 NestJS가 Passport 전략을 사용해서
 자동으로 검증하고 @Req() req : Request에서 validate 함수가 return한 값을 받을 수 있습니다.


9. 인증전략에서 jwt를 가져올 떄 req.cookies에 접근하기에 cookie-parser를 통해 req.cookies에 값을 전달해야 합니다.
=> cookieParser는 클라이언트 Cookie : jwt=abc; refreshToken=xyz567
=> {jwt : 'abc', refreshToken : 'xyz567'}처럼 변환합니다.


10. controller에서 res.cookie()에서 max-Age는 쿠키 자체의 기간
11. AuthModule에서 설정한 expiresIn은 JWT 자체의 만료 시간입니다.

