1. Quill의 구성요소
1-1. Editor => 실제로 사용자가 입력하고 편집하는 HTML 영역입니다. <div/>로 만들어져 있습니다.
1-2. Toolbar => 글꼴, 크기, 굵게, 기울임 등의 편집 도구 버튼을 의미합니다.
1-3 Delta => Quill 내부 문서 표현 방식입니다. 이를 통해 변경 이력을 명확히 추적할 수 있습니다.


2. Delta +
=> 10-3


3. Toolbar 적용
=> ReactQuill 컴포넌트의 modules={{
    toolbar : [
    ['bold', 'italic', 'underline', 'strike'],        // 텍스트 스타일
    [{ 'header': 1 }, { 'header': 2 }],               // 헤더
    [{ 'list': 'ordered' }, { 'list': 'bullet' }],    // 리스트
    ['link', 'image'],                                // 링크, 이미지
    ['clean']                                         // 포맷 제거
    ]
}} => 이런 형태를 갖습니다. 즉, modules는 객체를 받고 toolbar 키는 배열을 받고 배열은 각기 
 배열을 받아서 버튼을 커스터마이징 합니다.

3-1. toolbar.container
=> toolbar : {
    container : '#custom-toolbar'
} // HTML dom 요소를 직접 지정할 수 있습니다.

3-2. toolbar.handlers.key
=> 특정 버튼을 눌렀을 떄 기본 동작을 오버라이딩하고 커스텀 동작을 실행합니다.
=> key는 특정 버튼을 의미합니다. toolbar : {handlers : {image : ()=>{} } }
=> key를 통해 특정 버튼의 핸들러라고 명시하는 것입니다. bold, italic, link, image, video...


4. modules
=> 에디터의 동작이나 기능들을 설정하는 객체입니다.
<ReatQuill
    modules={{
        toolbar : [[],[],[],..],
        clipboard : {}, // 붙여넣기 관련 설정
        history : {}, // undo/redo 관련 설정
        keyboard : {}, // 단축키 설정
        syntax : true // 코드 블록 하이라이팅
    }}
/>


5. quill.on('event-name', (delta, oldDelta, source)=>{
    // evnet name
    // 'text-change' : 에디터 텍스트에 변화가 있을 때, image 삽입과 삭제도 trigger 됩니다.
    // 'selection-change' : 커서 위치나 선택 영역이 바뀔 떄, 
      이 떄는 첫 번쨰 인자로 range를 받아서 커서 범위를 알 수 있습니다.
    // 'editor-change' : 위의 두 이벤트를 합쳐서 포괄적으로 처리할 때 
})
=> 특정 이벤트가 발생할 떄 동작하는 콜백을 등록하는 메서드입니다.

6. <ReactQuill >


7. delta, blot, formats
=> delta는 에디터 내용 변경을 추적하는 데이터 구조
=> blot은 화면에 보이는 요소를 구성하는 단위
=> formats은 blot에 적용되는 스타일/기능 정의
(formats은 이런 blot을 사용할 수 있습니다. 라는 등록 목록입니다.)

=> delta는 blot으로 변환되어 실제 DOM에 렌더링됩니다. 
(delta를 실제로 렌더링하는 컴포넌트가 Blot입니다.)

=> editor.insertEmbed(index, 'customImage', { src, id })
=> Quill은 customImage라는 포맷을 찾습니다. 등록된 CustomImageBlot을 사용하게 됩니다.
=> 이 blot은 CustomImageBlot.create()가 실행되어 <img src="" data-id="">이 생성됩니다.

8. formats vs blot
=> format은 기능, Blot은 그 기능을 실제로 화면에 구현하는 클래스
=> Quill.register(CustomImageBlot)를 통해 연결해서 사용가능 => blot을 만들고 이름을 내보내면 formats
=> CustomImageBlot.blotName = 'customImage'; customImage가 formats
