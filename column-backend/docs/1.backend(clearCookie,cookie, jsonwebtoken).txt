1. res.clearCookie
1-1. 클라이언트에서 저장된 쿠키를 삭제하는데 사용되는 메서드입니다.

1-2. res.clearCookie(name, {options...})
=> name : 삭제하려는 쿠키의 이름
=> options : 쿠키를 설정할 떄 사용했던 옵션을 맞춰야 삭제됩니다. (설정 시 옵션을 맞춰주지 않으면 브라우저가 해당 쿠키를
못 찾을 수 도 있습니다.)

1-3. clearCookie 동작원리
=> 쿠키를 삭제하는 것이 아니라 해당 쿠키를 만료되도록 설정하여 브라우저에서 제거되게 합니다.


2. res.cookie
2-1. 서버에서 클라이언트에 쿠키를 설정하는 메서드입니다. 응답에 쿠키를 포함하는 방식입니다.
2-2. 쿠키는 저장된 뒤 요청 시 자동으로 서버에 다시 전송됩니다.

2-3. res.cookie(name, value, {options...})
=> name : 쿠키의 이름
=> value : 쿠키의 값
=> options : 쿠키의 속성

2-4. 쿠키의 options
=> maxAge : 쿠키의 수명을 설정하는 옵션입니다. 밀리초 단위로 저장됩니다.
=> expires : 쿠키의 만료 날짜를 설정하는 옵션입니다. Date 객체를 사용하여 설정합니다.
=> httpOnly : JS에서 쿠키에 접근할 수 없습니다. (XXS 공격으로부터 쿠키를 보호합니다.)
=> secure : 쿠키는 HTTPS 연결에서만 전송됩니다. 
=> path : 쿠키가 유효한 경로를 설정합니다. 기본값은 /로 설정되며, 해당 경로와 하위 경로에서만 쿠키가 전송됩니다.
=> domain : 쿠키가 유효한 도메인을 설정합니다. 기본값은 서버의 도메인입니다. 하위 도메인도 쿠기 사용 가능합니다.

=> sameSite : 쿠키가 동일한 사이트에서만 전송되도록 설정할 수 있습니다.
(sameSite : Strict => 동일한 사이트에서만 쿠키가 전송됩니다.)
(Lax : 기본적으로 동일한 사이트에서만 쿠키가 전송되지만 get 요청의 경우 다른 사이트에서 돌아와도 쿠키가 전송됩니다.)
(None : 동일 사이트 여부와 상관없이 쿠키가 전송됩니다. 그러나 보안을 위해 https 연결에서만 쿠키가 전송됩니다.)
(example.com에 쿠키가 설정되어 있다. kkk.com에서 링크를 클릭하여 example.com에 들어가면 쿠키를 전송하지 않는다. => Strict)
(get 요청일 떄만 쿠키를 보내는 것은 Lax, 그냥 다 보내지만 https 연결하에서 가능한 것은 None)


3. jsonwebtoken
3-1. jsonwebtoken은 NodeJS에서 JWT를 생성하고 검증하는 라이브러리입니다.
3-2. 인증이나 정보를 안전하게 교환하는 데 사용합니다.

3-3. JWT 구조 (문자열로 이루어져 있으며, 각 부분은 .으로 구분됩니다.)
=> header : JWT 타입과 서명 알고리즘을 명시합니다. (alg는 서명 알고리즘, typ는 타입)
=> payload : JWT에 담긴 데이터를 의미합니다.
=> signature : 헤더와 페이로드를 비밀 키를 사용해 해싱한 값입니다.
(헤더와 페이로드는 Base64Url로 인코딩되어 클라이언트에게 그대로 전달되고 헤더+페이로드 비밀키 해싱 데이터가 전달되어
검증의 역할을 맡습니다.)

3-4. jwt 생성
=> jsonwebtoken.sign(payload, secretKey, {options..});
options
=> expiredIn : "60"(60초), "2h"(2시간), "7d"(7일)
=> algorithm : 서명에 사용할 알고리즘을 설정합니다. (기본값은 HS256)
=> subject : 토큰의 주체를 설정합니다.
=> issuer : 토큰 발생자 설정
=> audience : 토큰의 대상을 설정

3-5. jwt 검증
=> jsonwebtoken.verify(token, secretKey, (err, decoded)=>{
    if(err){...}
    if(!err){console.log(decoded)}
})
